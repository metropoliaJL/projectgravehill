
import mysql.connector
import random
import time
#ALIOHJELMIA

# Aliohjelma, joka tulostaa aloitusnäytön
def StartingScreen():
    print(" ██▓███   ██▀███   ▒█████   ▄▄▄██▀▀▀▓█████  ▄████▄  ▄▄▄█████▓     ▄████  ██▀███   ▄▄▄    ██▒   █▓▓█████  ██░ ██  ██▓ ██▓     ██▓")  
    print("▓██░  ██▒▓██ ▒ ██▒▒██▒  ██▒   ▒██   ▓█   ▀ ▒██▀ ▀█  ▓  ██▒ ▓▒    ██▒ ▀█▒▓██ ▒ ██▒▒████▄ ▓██░   █▒▓█   ▀ ▓██░ ██▒▓██▒▓██▒    ▓██▒")    
    print("▓██░ ██▓▒▓██ ░▄█ ▒▒██░  ██▒   ░██   ▒███   ▒▓█    ▄ ▒ ▓██░ ▒░   ▒██░▄▄▄░▓██ ░▄█ ▒▒██  ▀█▄▓██  █▒░▒███   ▒██▀▀██░▒██▒▒██░    ▒██░")    
    print("▒██▄█▓▒ ▒▒██▀▀█▄  ▒██   ██░▓██▄██▓  ▒▓█  ▄ ▒▓▓▄ ▄██▒░ ▓██▓ ░    ░▓█  ██▓▒██▀▀█▄  ░██▄▄▄▄██▒██ █░░▒▓█  ▄ ░▓█ ░██ ░██░▒██░    ▒██░")    
    print("▒██▒ ░  ░░██▓ ▒██▒░ ████▓▒░ ▓███▒   ░▒████▒▒ ▓███▀ ░  ▒██▒ ░    ░▒▓███▀▒░██▓ ▒██▒ ▓█   ▓██▒▒▀█░  ░▒████▒░▓█▒░██▓░██░░██████▒░██████▒")
    print("▒▓▒░ ░  ░░ ▒▓ ░▒▓░░ ▒░▒░▒░  ▒▓▒▒░   ░░ ▒░ ░░ ░▒ ▒  ░  ▒ ░░       ░▒   ▒ ░ ▒▓ ░▒▓░ ▒▒   ▓▒█░░ ▐░  ░░ ▒░ ░ ▒ ░░▒░▒░▓  ░ ▒░▓  ░░ ▒░▓  ░")
    print("░▒ ░       ░▒ ░ ▒░  ░ ▒ ▒░  ▒ ░▒░    ░ ░  ░  ░  ▒       ░         ░   ░   ░▒ ░ ▒░  ▒   ▒▒ ░░ ░░   ░ ░  ░ ▒ ░▒░ ░ ▒ ░░ ░ ▒  ░░ ░ ▒  ░")
    print("░░         ░░   ░ ░ ░ ░ ▒   ░ ░ ░      ░   ░          ░         ░ ░   ░   ░░   ░   ░   ▒     ░░     ░    ░  ░░ ░ ▒ ░  ░ ░     ░ ░   ")   
    print("░         ░ ░   ░   ░      ░  ░░ ░                        ░    ░           ░  ░   ░     ░  ░ ░  ░  ░ ░      ░  ░    ░  ░")
    print("                                       ░                                                 ░                                ")      
    x = input("Type 'enter' to begin your journey ")
    while (x != "enter"):
        print("Are you scared? Please try again")
        x = input ("Type 'enter' to begin your journey ")
    print("Good luck. You will need it")
    return

# Aliohjelma joka tulostaa juonikuvauksen
def printStoryDesc():
    print("STORY SO FAR...")
    time.sleep(2)
    print(" Samuel Blackwater has always been interested in strange tales and urban legends. He is a former")
    time.sleep(1)
    print("professor of folkloristics in the Royal university of Southern Scotland. Recently he has been")
    time.sleep(1)
    print("studying the rumors about the Castle of Gravehill and he decides to meet the last heir of the")
    time.sleep(1)
    print("Gravehill family. Weeks pass and nothing is heard from the professor but since he didn't tell anyone")
    time.sleep(1)
    print("about his expedition no one is concerned of his wellbeing. ")
    print("")
    time.sleep(1)
    print(" One day Howard Blackwater receives a letter from his only living relative Uncle Samuel")
    time.sleep(1)
    print("Blackwater. ”Hello my dearest nephew. If you are reading this letter and you have heard nothing of")
    time.sleep(1)
    print("me past four weeks I am in grave danger. I have been investigating the strange rumors regarding")
    time.sleep(1)
    print("the  Castle of Gravehill. The family of Gravehills has always been in the center of rumors around")
    time.sleep(1)
    print("that area. But I don't believe these are just rumors. I am quite sure there are some really dark and")
    time.sleep(1)
    print("evil things happening in the castle and I will find out what. Howard, you are my only hope please")
    time.sleep(1)
    print("help me.” Afraid but twistedly intrigued Howard departs for the Castle of Gravehill.")
    time.sleep(2)
          
    
#Aliohjelma, joka tulostaa listan käytössä olevista komennoista
def printCommands():
    print("COMMANDS")
    print("commands - print list of commands")
    print("go north - alias n - moves game character")
    print("go souht - alias s - moves game character")
    print("go east - alias e - moves game character")
    print("go west - alias w - moves game character")
    print("go up - alias u - moves game character")
    print("go down - alias d - moves game character")
    print("take  - alias get - get item to game character")
    print("drop -  drop item to room")
    print("examine - describes the current room")
    print("inventory - shows my items")
    print("open door - open door ")
    print("close door - close door")
    print("drink 'item' - drinks the item if possible")
    print("eat 'item' - eats the item if possible")
    print("pray - prays the Old Ones for power and salvation")
    print("break 'object' with 'item' - breaks the object with item if possible")
    print("dig - digs around the player character")
    print("attack with 'item' - attacks monster in current location")
    print("reload 'weapon' - reloads the weapon")
    print("run north/south/west/east - runs away form monter to selected direction")
    print("quit - alias q - quits the game")
    print("\n")
    return

#Aliohjelma, joka tulostaa pelihahmon nykyisen huoneen kuvauksen    
def printCharCurLocDesc():
    cur = db.cursor()
    sql = "select description from room where ID in (select location from playercharacter where ID = 1);"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1: 
        cur.execute(sql)
        for row in result:
            print("%s"%(row))
    return

#Aliohjelma, joka tulostaa pelihahmon nykyisessä huoneessa olevat esineet
def printCharCurLocItems():
    cur = db.cursor()
    sql = "select description from object where location in (select location from playercharacter where id = 1);"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1:
        cur.execute(sql)
        for row in result:
            print (row)
    return

#Aliohjelma, joka muuttaa käyttäjän ottaman esineen sijainniksi pelaajan, esineen kuvaus parametrina
def updateItemToPlayer(item):
    cur = db.cursor()
    sql = "update items inner join itemtypes on items.itemtype=itemtypes.ID set withPlayer = 1 where name='"+item+"';"
    cur.execute(sql)
    sql = "update items inner join itemtypes on items.itemtype=itemtypes.ID set location = null where name='"+item+"';"
    cur.execute(sql)
    print(item+" taken")
    return

#Aliohjelma, joka tarkistaa että käyttäjälle voidaan tulostaa esine otetuksi, esine parametrina
def checkIfUserWantedItemInRoom(item):
    takenOk=False;
    cur = db.cursor()
    sql = "select name from itemtypes inner join items on itemtypes.ID=items.itemtype where location in (select location from playercharacter where id =1);"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1:
        cur.execute(sql)
        for row in result:
            if row[0]==item:
                takenOk=True
    return takenOk
    
#Aliohjelma, joka tulostaa pelihahmon kantamat esineet
def printItemsWithPlayer():
    cur = db.cursor()
    sql = "select itemtypes.name from items inner join itemtypes on items.itemtype=itemtypes.ID where withPlayer=1;"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1:
        cur.execute(sql)
        for row in result:
            print("-%s"%(row))
    return

#Aliohjelma, joka tarkistaa että pelaajalla on esine, minkä hän haluaa pudottaa, esine parametrina
def checkIfUserHaveItem(item):
    dropOk=False;
    cur = db.cursor()
    sql = "select withPlayer from items inner join itemtypes on items.itemtype=itemtypes.ID where name='"+item+"';"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1:
        cur.execute(sql)
        for row in result:
            if row[0]==1:
                dropOk=True
    return dropOk

#Aliohjelma, joka tarkistaa onko huoneessa valoa
def checkRoomLight():
    LightOn = True;
    cur = db.cursor()
    sql = "select light from room where ID in (select location from playercharacter where ID = 1);"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount == 1:
        LightOn=True
    else:
        LightOn=False         
    return LightOn

def checkRoomLight2():
    LightOn=False;
    cur = db.cursor()
    sql = "select light from room where ID in (select location from playercharacter where ID = 1);"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1:
        cur.execute(sql)
        for row in result:
            if row[0]==1:
                LightOn=True
    else:
        LightOn=False
    return LightOn
        
    

#Aliohjelma, joka pudottaa esineen pelaajalta huoneeseen missä pelaaja on:
def dropItemToCurRoom(item):
    cur = db.cursor()
    sql = "update items inner join itemtypes on items.itemtype=itemtypes.ID set withPlayer = 0, location = (select location from playercharacter where id=1) where itemtypes.name='"+item+"';"
    cur.execute(sql)
    print("You dropped "+item.lower())
    return

def roomInDirection(direction):
    cur = db.cursor()
    sql = "select "+direction+" from map where curRoom in (select location from playercharacter where id = 1)"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1:
        cur.execute(sql)
        for row in result:
            roomDirection = row[0]
    return roomDirection
    
def roomOpenInDirection(direction):

    cur = db.cursor()
    sql = "select "+direction+"Open from map where curRoom in (select location from playercharacter where id = 1)"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1:
        cur.execute(sql)
        for row in result:
            roomDirectionOpen = row[0]
    return roomDirectionOpen

#Aliohjelma, joka avaa oven
def openDoor():
    #Tarkasteaan että pelaajalla on avain
    #Muutetaan ovi auki map-taulussa
    cur = db.cursor()
    if checkIfUserHaveItem("key") == True:
        sql = "update map set eastOpen = true where id = 3;"
        cur.execute(sql)
        print("Door is open now")
    else:
        print("You can not open door without key")
   
        
def directionPossibleIfYesMove(direction):
    #tsekkaa onko huone ko.suunnassa
    #huomio peikko sillalla ja avain linnan oveen
    #huomio että peikko on sillalla vain ensimmäisellä kerralla
    moveOk = False
    if direction == "east" and roomOpenInDirection(direction) == 0:
        moveOk = True
    elif direction == "west" and roomOpenInDirection(direction) == 0:
        moveOk = True
    elif direction == "north" and roomOpenInDirection(direction) == 0:
        moveOk = True
    elif direction == "south" and roomOpenInDirection(direction) == 0:
        moveOk = True
    elif direction == "noertheast" and roomOpenInDirection(direction) == 0:
        moveOk = True
    elif direction == "southeast" and roomOpenInDirection(direction) == 0:
        moveOk = True
    elif direction == "southwest" and roomOpenInDirection(direction) == 0:
        moveOk = True
    elif direction == "northwest" and roomOpenInDirection(direction) == 0:
        moveOk = True
    elif direction == "up" and roomOpenInDirection(direction) == 0:
        moveOk = True
    elif direction == "down" and roomOpenInDirection(direction) == 0:
        moveOk = True
    #else if linnan ovi
    #Päivitetään pelaajan uusi sijainti
    elif roomInDirection(direction) != "null" and roomOpenInDirection(direction) == 1:
        cur = db.cursor()
        sql = "update playercharacter set location = "+str(roomInDirection(direction))+" where id=1;"
        cur.execute(sql)
        moveOk = True
    return moveOk

#Aliohjelma joka tulostaa huoneen nimen missä pelaaja sijaitsee

def printCharCurLocName():
    cur = db.cursor()
    sql = "select name from room where ID in (select location from playercharacter where ID = 1);"
    cur.execute(sql)
    result = cur.fetchall()
    if cur.rowcount>=1: 
        cur.execute(sql)
        for row in result:
            print("%s"%(row))
    return



    
#PÄÄOHJELMA ALKAA

# Tietokantayhteyden nuodostaminen
db = mysql.connector.connect(host="127.0.0.1",
                            user="Rainer",
                            passwd="Ironmaiden28995",
                            db="gravehill",
                            buffered=True)
#db.autocommit=False;
StartingScreen()
printStoryDesc()
x = input("Type 'c' to continue ")
while (x != "c"):
    print("Please try again")
    x = input ("Type 'c' to continue ")
print("\n")
#printCommands()
print("Welcome to the Castle Gravehill!\n")
time.sleep(1)
end = "temp"

while (end != "quit"):
    print("You are on the: ")
    printCharCurLocName()
    print("\n")
    if checkRoomLight2() == True:
        printCharCurLocDesc()
    com="temp"
    #while-silmukka, missä pyöritään kunnes käyttäjä antaa lopetuskäskyn
    while(end!="quit"):
        command = input("What would you like to do? ")
        if command=="":
            print("Whatever")
        else:
            #Tehdään komennosta lista esim. "take key", listan ensimmäinen alkio on "take" ja toinen alkio on "key"
            comList = command.split()
            #Otetaan com muuttujaan listan ensimmäinen arvo
            com = comList[0];
            #comList listasta poistetaan eka alkio
            del comList[0]
            #item muuttujan arvoksi tulee comList listasta merkkijonoksi muutettu merkkijono
            item = " ".join(str(x)for x in comList).title()
            
        #if-rakenne, missä käydään kaikki komennot läpi
        if com == "commands":
            printCommands()
        elif com == "quit" or com == "q":
            end="quit"
        elif com == "examine":
            printCharCurLocDesc()
        elif com == "take":
            #Tarkistetaan että käskyssä annettu esine on huoneessa; Jos on, otetaan se
            if checkIfUserWantedItemInRoom(item) == True:
                updateItemToPlayer(item)
            else:
                print(item+" can not be taken, because it is not in the room")
        elif com == "inventory":
            print("Player Items:")
            printItemsWithPlayer()
        elif com == "open":
                openDoor()
        elif com == "drop":
            #Tarkistetaan että käskyssä annettu esine on pelaajalla; Jos on, pudotetaan se
            if checkIfUserHaveItem(item) == True:
                    dropItemToCurRoom(item)
            else:
                print("You don't have such item.")
        elif com == "east" or com == "e" or com == "west" or com == "w" or com == "north" or com == "n" or com == "south" or com == "s" or com == "down" or com == "d" or com == "up" or com == "u" or com == "northeast" or com == "ne" or com == "southeast" or com == "se" or com == "southwest" or com == "sw" or com == "northwest" or com== "nw": 
            if com=="e":
                com = "east";
            if com=="w":
                com = "west";
            if com=="n":
                com = "north";
            if com=="s":
                com = "south";
            if com=="d":
                com = "down";
            if com=="u":
                com = "up";
            if com=="ne":
                com = "northeast";
            if com=="se":
                com = "southeast";
            if com=="sw":
                com = "southwest";
            if com=="nw":
                com = "northwest";
          
            if directionPossibleIfYesMove(com) == True:
                print("Your new room is: ")
                printCharCurLocName()
                print("\n")
                printCharCurLocDesc()
            else:
                print("You cannot move to that direction")
            
        else:
          print("I did not understand, please try again")  
           

# Perutaan tietokantaan tehdyt muutokset
db.rollback()
#suljetaan tietokanta yhteys
db.close()
print("I will see you in your nightmares",end="")
for x in range (0,6):
    time.sleep(0.7)
    print(".",end="")
time.sleep(2)
print("\nBYE!")

